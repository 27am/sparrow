/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package edu.berkeley.sparrow.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class InternalService {

  public interface Iface {

    public Map<String,edu.berkeley.sparrow.thrift.TResourceVector> getLoad(String app, String requestId) throws org.apache.thrift.TException;

    public boolean launchTask(String app, ByteBuffer message, String requestId, String taskId, edu.berkeley.sparrow.thrift.TUserGroupInfo user, edu.berkeley.sparrow.thrift.TResourceVector estimatedResources, String schedulerAddress) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getLoad(String app, String requestId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getLoad_call> resultHandler) throws org.apache.thrift.TException;

    public void launchTask(String app, ByteBuffer message, String requestId, String taskId, edu.berkeley.sparrow.thrift.TUserGroupInfo user, edu.berkeley.sparrow.thrift.TResourceVector estimatedResources, String schedulerAddress, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.launchTask_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Map<String,edu.berkeley.sparrow.thrift.TResourceVector> getLoad(String app, String requestId) throws org.apache.thrift.TException
    {
      send_getLoad(app, requestId);
      return recv_getLoad();
    }

    public void send_getLoad(String app, String requestId) throws org.apache.thrift.TException
    {
      getLoad_args args = new getLoad_args();
      args.setApp(app);
      args.setRequestId(requestId);
      sendBase("getLoad", args);
    }

    public Map<String,edu.berkeley.sparrow.thrift.TResourceVector> recv_getLoad() throws org.apache.thrift.TException
    {
      getLoad_result result = new getLoad_result();
      receiveBase(result, "getLoad");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLoad failed: unknown result");
    }

    public boolean launchTask(String app, ByteBuffer message, String requestId, String taskId, edu.berkeley.sparrow.thrift.TUserGroupInfo user, edu.berkeley.sparrow.thrift.TResourceVector estimatedResources, String schedulerAddress) throws org.apache.thrift.TException
    {
      send_launchTask(app, message, requestId, taskId, user, estimatedResources, schedulerAddress);
      return recv_launchTask();
    }

    public void send_launchTask(String app, ByteBuffer message, String requestId, String taskId, edu.berkeley.sparrow.thrift.TUserGroupInfo user, edu.berkeley.sparrow.thrift.TResourceVector estimatedResources, String schedulerAddress) throws org.apache.thrift.TException
    {
      launchTask_args args = new launchTask_args();
      args.setApp(app);
      args.setMessage(message);
      args.setRequestId(requestId);
      args.setTaskId(taskId);
      args.setUser(user);
      args.setEstimatedResources(estimatedResources);
      args.setSchedulerAddress(schedulerAddress);
      sendBase("launchTask", args);
    }

    public boolean recv_launchTask() throws org.apache.thrift.TException
    {
      launchTask_result result = new launchTask_result();
      receiveBase(result, "launchTask");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "launchTask failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getLoad(String app, String requestId, org.apache.thrift.async.AsyncMethodCallback<getLoad_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLoad_call method_call = new getLoad_call(app, requestId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLoad_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String app;
      private String requestId;
      public getLoad_call(String app, String requestId, org.apache.thrift.async.AsyncMethodCallback<getLoad_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.app = app;
        this.requestId = requestId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLoad", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLoad_args args = new getLoad_args();
        args.setApp(app);
        args.setRequestId(requestId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,edu.berkeley.sparrow.thrift.TResourceVector> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLoad();
      }
    }

    public void launchTask(String app, ByteBuffer message, String requestId, String taskId, edu.berkeley.sparrow.thrift.TUserGroupInfo user, edu.berkeley.sparrow.thrift.TResourceVector estimatedResources, String schedulerAddress, org.apache.thrift.async.AsyncMethodCallback<launchTask_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      launchTask_call method_call = new launchTask_call(app, message, requestId, taskId, user, estimatedResources, schedulerAddress, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class launchTask_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String app;
      private ByteBuffer message;
      private String requestId;
      private String taskId;
      private edu.berkeley.sparrow.thrift.TUserGroupInfo user;
      private edu.berkeley.sparrow.thrift.TResourceVector estimatedResources;
      private String schedulerAddress;
      public launchTask_call(String app, ByteBuffer message, String requestId, String taskId, edu.berkeley.sparrow.thrift.TUserGroupInfo user, edu.berkeley.sparrow.thrift.TResourceVector estimatedResources, String schedulerAddress, org.apache.thrift.async.AsyncMethodCallback<launchTask_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.app = app;
        this.message = message;
        this.requestId = requestId;
        this.taskId = taskId;
        this.user = user;
        this.estimatedResources = estimatedResources;
        this.schedulerAddress = schedulerAddress;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("launchTask", org.apache.thrift.protocol.TMessageType.CALL, 0));
        launchTask_args args = new launchTask_args();
        args.setApp(app);
        args.setMessage(message);
        args.setRequestId(requestId);
        args.setTaskId(taskId);
        args.setUser(user);
        args.setEstimatedResources(estimatedResources);
        args.setSchedulerAddress(schedulerAddress);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_launchTask();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getLoad", new getLoad());
      processMap.put("launchTask", new launchTask());
      return processMap;
    }

    private static class getLoad<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLoad_args> {
      public getLoad() {
        super("getLoad");
      }

      protected getLoad_args getEmptyArgsInstance() {
        return new getLoad_args();
      }

      protected getLoad_result getResult(I iface, getLoad_args args) throws org.apache.thrift.TException {
        getLoad_result result = new getLoad_result();
        result.success = iface.getLoad(args.app, args.requestId);
        return result;
      }
    }

    private static class launchTask<I extends Iface> extends org.apache.thrift.ProcessFunction<I, launchTask_args> {
      public launchTask() {
        super("launchTask");
      }

      protected launchTask_args getEmptyArgsInstance() {
        return new launchTask_args();
      }

      protected launchTask_result getResult(I iface, launchTask_args args) throws org.apache.thrift.TException {
        launchTask_result result = new launchTask_result();
        result.success = iface.launchTask(args.app, args.message, args.requestId, args.taskId, args.user, args.estimatedResources, args.schedulerAddress);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class getLoad_args implements org.apache.thrift.TBase<getLoad_args, getLoad_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLoad_args");

    private static final org.apache.thrift.protocol.TField APP_FIELD_DESC = new org.apache.thrift.protocol.TField("app", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.STRING, (short)2);

    public String app; // required
    public String requestId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP((short)1, "app"),
      REQUEST_ID((short)2, "requestId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP
            return APP;
          case 2: // REQUEST_ID
            return REQUEST_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP, new org.apache.thrift.meta_data.FieldMetaData("app", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLoad_args.class, metaDataMap);
    }

    public getLoad_args() {
    }

    public getLoad_args(
      String app,
      String requestId)
    {
      this();
      this.app = app;
      this.requestId = requestId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLoad_args(getLoad_args other) {
      if (other.isSetApp()) {
        this.app = other.app;
      }
      if (other.isSetRequestId()) {
        this.requestId = other.requestId;
      }
    }

    public getLoad_args deepCopy() {
      return new getLoad_args(this);
    }

    public void clear() {
      this.app = null;
      this.requestId = null;
    }

    public String getApp() {
      return this.app;
    }

    public getLoad_args setApp(String app) {
      this.app = app;
      return this;
    }

    public void unsetApp() {
      this.app = null;
    }

    /** Returns true if field app is set (has been assigned a value) and false otherwise */
    public boolean isSetApp() {
      return this.app != null;
    }

    public void setAppIsSet(boolean value) {
      if (!value) {
        this.app = null;
      }
    }

    public String getRequestId() {
      return this.requestId;
    }

    public getLoad_args setRequestId(String requestId) {
      this.requestId = requestId;
      return this;
    }

    public void unsetRequestId() {
      this.requestId = null;
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return this.requestId != null;
    }

    public void setRequestIdIsSet(boolean value) {
      if (!value) {
        this.requestId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP:
        if (value == null) {
          unsetApp();
        } else {
          setApp((String)value);
        }
        break;

      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP:
        return getApp();

      case REQUEST_ID:
        return getRequestId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP:
        return isSetApp();
      case REQUEST_ID:
        return isSetRequestId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLoad_args)
        return this.equals((getLoad_args)that);
      return false;
    }

    public boolean equals(getLoad_args that) {
      if (that == null)
        return false;

      boolean this_present_app = true && this.isSetApp();
      boolean that_present_app = true && that.isSetApp();
      if (this_present_app || that_present_app) {
        if (!(this_present_app && that_present_app))
          return false;
        if (!this.app.equals(that.app))
          return false;
      }

      boolean this_present_requestId = true && this.isSetRequestId();
      boolean that_present_requestId = true && that.isSetRequestId();
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (!this.requestId.equals(that.requestId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getLoad_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getLoad_args typedOther = (getLoad_args)other;

      lastComparison = Boolean.valueOf(isSetApp()).compareTo(typedOther.isSetApp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.app, typedOther.app);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(typedOther.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, typedOther.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // APP
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.app = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // REQUEST_ID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.requestId = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.app != null) {
        oprot.writeFieldBegin(APP_FIELD_DESC);
        oprot.writeString(this.app);
        oprot.writeFieldEnd();
      }
      if (this.requestId != null) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeString(this.requestId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLoad_args(");
      boolean first = true;

      sb.append("app:");
      if (this.app == null) {
        sb.append("null");
      } else {
        sb.append(this.app);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("requestId:");
      if (this.requestId == null) {
        sb.append("null");
      } else {
        sb.append(this.requestId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

  }

  public static class getLoad_result implements org.apache.thrift.TBase<getLoad_result, getLoad_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLoad_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    public Map<String,edu.berkeley.sparrow.thrift.TResourceVector> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.berkeley.sparrow.thrift.TResourceVector.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLoad_result.class, metaDataMap);
    }

    public getLoad_result() {
    }

    public getLoad_result(
      Map<String,edu.berkeley.sparrow.thrift.TResourceVector> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLoad_result(getLoad_result other) {
      if (other.isSetSuccess()) {
        Map<String,edu.berkeley.sparrow.thrift.TResourceVector> __this__success = new HashMap<String,edu.berkeley.sparrow.thrift.TResourceVector>();
        for (Map.Entry<String, edu.berkeley.sparrow.thrift.TResourceVector> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          edu.berkeley.sparrow.thrift.TResourceVector other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          edu.berkeley.sparrow.thrift.TResourceVector __this__success_copy_value = new edu.berkeley.sparrow.thrift.TResourceVector(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public getLoad_result deepCopy() {
      return new getLoad_result(this);
    }

    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, edu.berkeley.sparrow.thrift.TResourceVector val) {
      if (this.success == null) {
        this.success = new HashMap<String,edu.berkeley.sparrow.thrift.TResourceVector>();
      }
      this.success.put(key, val);
    }

    public Map<String,edu.berkeley.sparrow.thrift.TResourceVector> getSuccess() {
      return this.success;
    }

    public getLoad_result setSuccess(Map<String,edu.berkeley.sparrow.thrift.TResourceVector> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,edu.berkeley.sparrow.thrift.TResourceVector>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLoad_result)
        return this.equals((getLoad_result)that);
      return false;
    }

    public boolean equals(getLoad_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getLoad_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getLoad_result typedOther = (getLoad_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map18 = iprot.readMapBegin();
                this.success = new HashMap<String,edu.berkeley.sparrow.thrift.TResourceVector>(2*_map18.size);
                for (int _i19 = 0; _i19 < _map18.size; ++_i19)
                {
                  String _key20; // required
                  edu.berkeley.sparrow.thrift.TResourceVector _val21; // required
                  _key20 = iprot.readString();
                  _val21 = new edu.berkeley.sparrow.thrift.TResourceVector();
                  _val21.read(iprot);
                  this.success.put(_key20, _val21);
                }
                iprot.readMapEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, this.success.size()));
          for (Map.Entry<String, edu.berkeley.sparrow.thrift.TResourceVector> _iter22 : this.success.entrySet())
          {
            oprot.writeString(_iter22.getKey());
            _iter22.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLoad_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

  }

  public static class launchTask_args implements org.apache.thrift.TBase<launchTask_args, launchTask_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("launchTask_args");

    private static final org.apache.thrift.protocol.TField APP_FIELD_DESC = new org.apache.thrift.protocol.TField("app", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField ESTIMATED_RESOURCES_FIELD_DESC = new org.apache.thrift.protocol.TField("estimatedResources", org.apache.thrift.protocol.TType.STRUCT, (short)6);
    private static final org.apache.thrift.protocol.TField SCHEDULER_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("schedulerAddress", org.apache.thrift.protocol.TType.STRING, (short)7);

    public String app; // required
    public ByteBuffer message; // required
    public String requestId; // required
    public String taskId; // required
    public edu.berkeley.sparrow.thrift.TUserGroupInfo user; // required
    public edu.berkeley.sparrow.thrift.TResourceVector estimatedResources; // required
    public String schedulerAddress; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APP((short)1, "app"),
      MESSAGE((short)2, "message"),
      REQUEST_ID((short)3, "requestId"),
      TASK_ID((short)4, "taskId"),
      USER((short)5, "user"),
      ESTIMATED_RESOURCES((short)6, "estimatedResources"),
      SCHEDULER_ADDRESS((short)7, "schedulerAddress");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APP
            return APP;
          case 2: // MESSAGE
            return MESSAGE;
          case 3: // REQUEST_ID
            return REQUEST_ID;
          case 4: // TASK_ID
            return TASK_ID;
          case 5: // USER
            return USER;
          case 6: // ESTIMATED_RESOURCES
            return ESTIMATED_RESOURCES;
          case 7: // SCHEDULER_ADDRESS
            return SCHEDULER_ADDRESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APP, new org.apache.thrift.meta_data.FieldMetaData("app", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.berkeley.sparrow.thrift.TUserGroupInfo.class)));
      tmpMap.put(_Fields.ESTIMATED_RESOURCES, new org.apache.thrift.meta_data.FieldMetaData("estimatedResources", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, edu.berkeley.sparrow.thrift.TResourceVector.class)));
      tmpMap.put(_Fields.SCHEDULER_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("schedulerAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(launchTask_args.class, metaDataMap);
    }

    public launchTask_args() {
    }

    public launchTask_args(
      String app,
      ByteBuffer message,
      String requestId,
      String taskId,
      edu.berkeley.sparrow.thrift.TUserGroupInfo user,
      edu.berkeley.sparrow.thrift.TResourceVector estimatedResources,
      String schedulerAddress)
    {
      this();
      this.app = app;
      this.message = message;
      this.requestId = requestId;
      this.taskId = taskId;
      this.user = user;
      this.estimatedResources = estimatedResources;
      this.schedulerAddress = schedulerAddress;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public launchTask_args(launchTask_args other) {
      if (other.isSetApp()) {
        this.app = other.app;
      }
      if (other.isSetMessage()) {
        this.message = org.apache.thrift.TBaseHelper.copyBinary(other.message);
;
      }
      if (other.isSetRequestId()) {
        this.requestId = other.requestId;
      }
      if (other.isSetTaskId()) {
        this.taskId = other.taskId;
      }
      if (other.isSetUser()) {
        this.user = new edu.berkeley.sparrow.thrift.TUserGroupInfo(other.user);
      }
      if (other.isSetEstimatedResources()) {
        this.estimatedResources = new edu.berkeley.sparrow.thrift.TResourceVector(other.estimatedResources);
      }
      if (other.isSetSchedulerAddress()) {
        this.schedulerAddress = other.schedulerAddress;
      }
    }

    public launchTask_args deepCopy() {
      return new launchTask_args(this);
    }

    public void clear() {
      this.app = null;
      this.message = null;
      this.requestId = null;
      this.taskId = null;
      this.user = null;
      this.estimatedResources = null;
      this.schedulerAddress = null;
    }

    public String getApp() {
      return this.app;
    }

    public launchTask_args setApp(String app) {
      this.app = app;
      return this;
    }

    public void unsetApp() {
      this.app = null;
    }

    /** Returns true if field app is set (has been assigned a value) and false otherwise */
    public boolean isSetApp() {
      return this.app != null;
    }

    public void setAppIsSet(boolean value) {
      if (!value) {
        this.app = null;
      }
    }

    public byte[] getMessage() {
      setMessage(org.apache.thrift.TBaseHelper.rightSize(message));
      return message == null ? null : message.array();
    }

    public ByteBuffer bufferForMessage() {
      return message;
    }

    public launchTask_args setMessage(byte[] message) {
      setMessage(message == null ? (ByteBuffer)null : ByteBuffer.wrap(message));
      return this;
    }

    public launchTask_args setMessage(ByteBuffer message) {
      this.message = message;
      return this;
    }

    public void unsetMessage() {
      this.message = null;
    }

    /** Returns true if field message is set (has been assigned a value) and false otherwise */
    public boolean isSetMessage() {
      return this.message != null;
    }

    public void setMessageIsSet(boolean value) {
      if (!value) {
        this.message = null;
      }
    }

    public String getRequestId() {
      return this.requestId;
    }

    public launchTask_args setRequestId(String requestId) {
      this.requestId = requestId;
      return this;
    }

    public void unsetRequestId() {
      this.requestId = null;
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return this.requestId != null;
    }

    public void setRequestIdIsSet(boolean value) {
      if (!value) {
        this.requestId = null;
      }
    }

    public String getTaskId() {
      return this.taskId;
    }

    public launchTask_args setTaskId(String taskId) {
      this.taskId = taskId;
      return this;
    }

    public void unsetTaskId() {
      this.taskId = null;
    }

    /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskId() {
      return this.taskId != null;
    }

    public void setTaskIdIsSet(boolean value) {
      if (!value) {
        this.taskId = null;
      }
    }

    public edu.berkeley.sparrow.thrift.TUserGroupInfo getUser() {
      return this.user;
    }

    public launchTask_args setUser(edu.berkeley.sparrow.thrift.TUserGroupInfo user) {
      this.user = user;
      return this;
    }

    public void unsetUser() {
      this.user = null;
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    public edu.berkeley.sparrow.thrift.TResourceVector getEstimatedResources() {
      return this.estimatedResources;
    }

    public launchTask_args setEstimatedResources(edu.berkeley.sparrow.thrift.TResourceVector estimatedResources) {
      this.estimatedResources = estimatedResources;
      return this;
    }

    public void unsetEstimatedResources() {
      this.estimatedResources = null;
    }

    /** Returns true if field estimatedResources is set (has been assigned a value) and false otherwise */
    public boolean isSetEstimatedResources() {
      return this.estimatedResources != null;
    }

    public void setEstimatedResourcesIsSet(boolean value) {
      if (!value) {
        this.estimatedResources = null;
      }
    }

    public String getSchedulerAddress() {
      return this.schedulerAddress;
    }

    public launchTask_args setSchedulerAddress(String schedulerAddress) {
      this.schedulerAddress = schedulerAddress;
      return this;
    }

    public void unsetSchedulerAddress() {
      this.schedulerAddress = null;
    }

    /** Returns true if field schedulerAddress is set (has been assigned a value) and false otherwise */
    public boolean isSetSchedulerAddress() {
      return this.schedulerAddress != null;
    }

    public void setSchedulerAddressIsSet(boolean value) {
      if (!value) {
        this.schedulerAddress = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APP:
        if (value == null) {
          unsetApp();
        } else {
          setApp((String)value);
        }
        break;

      case MESSAGE:
        if (value == null) {
          unsetMessage();
        } else {
          setMessage((ByteBuffer)value);
        }
        break;

      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((String)value);
        }
        break;

      case TASK_ID:
        if (value == null) {
          unsetTaskId();
        } else {
          setTaskId((String)value);
        }
        break;

      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((edu.berkeley.sparrow.thrift.TUserGroupInfo)value);
        }
        break;

      case ESTIMATED_RESOURCES:
        if (value == null) {
          unsetEstimatedResources();
        } else {
          setEstimatedResources((edu.berkeley.sparrow.thrift.TResourceVector)value);
        }
        break;

      case SCHEDULER_ADDRESS:
        if (value == null) {
          unsetSchedulerAddress();
        } else {
          setSchedulerAddress((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APP:
        return getApp();

      case MESSAGE:
        return getMessage();

      case REQUEST_ID:
        return getRequestId();

      case TASK_ID:
        return getTaskId();

      case USER:
        return getUser();

      case ESTIMATED_RESOURCES:
        return getEstimatedResources();

      case SCHEDULER_ADDRESS:
        return getSchedulerAddress();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APP:
        return isSetApp();
      case MESSAGE:
        return isSetMessage();
      case REQUEST_ID:
        return isSetRequestId();
      case TASK_ID:
        return isSetTaskId();
      case USER:
        return isSetUser();
      case ESTIMATED_RESOURCES:
        return isSetEstimatedResources();
      case SCHEDULER_ADDRESS:
        return isSetSchedulerAddress();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof launchTask_args)
        return this.equals((launchTask_args)that);
      return false;
    }

    public boolean equals(launchTask_args that) {
      if (that == null)
        return false;

      boolean this_present_app = true && this.isSetApp();
      boolean that_present_app = true && that.isSetApp();
      if (this_present_app || that_present_app) {
        if (!(this_present_app && that_present_app))
          return false;
        if (!this.app.equals(that.app))
          return false;
      }

      boolean this_present_message = true && this.isSetMessage();
      boolean that_present_message = true && that.isSetMessage();
      if (this_present_message || that_present_message) {
        if (!(this_present_message && that_present_message))
          return false;
        if (!this.message.equals(that.message))
          return false;
      }

      boolean this_present_requestId = true && this.isSetRequestId();
      boolean that_present_requestId = true && that.isSetRequestId();
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (!this.requestId.equals(that.requestId))
          return false;
      }

      boolean this_present_taskId = true && this.isSetTaskId();
      boolean that_present_taskId = true && that.isSetTaskId();
      if (this_present_taskId || that_present_taskId) {
        if (!(this_present_taskId && that_present_taskId))
          return false;
        if (!this.taskId.equals(that.taskId))
          return false;
      }

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      boolean this_present_estimatedResources = true && this.isSetEstimatedResources();
      boolean that_present_estimatedResources = true && that.isSetEstimatedResources();
      if (this_present_estimatedResources || that_present_estimatedResources) {
        if (!(this_present_estimatedResources && that_present_estimatedResources))
          return false;
        if (!this.estimatedResources.equals(that.estimatedResources))
          return false;
      }

      boolean this_present_schedulerAddress = true && this.isSetSchedulerAddress();
      boolean that_present_schedulerAddress = true && that.isSetSchedulerAddress();
      if (this_present_schedulerAddress || that_present_schedulerAddress) {
        if (!(this_present_schedulerAddress && that_present_schedulerAddress))
          return false;
        if (!this.schedulerAddress.equals(that.schedulerAddress))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(launchTask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      launchTask_args typedOther = (launchTask_args)other;

      lastComparison = Boolean.valueOf(isSetApp()).compareTo(typedOther.isSetApp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.app, typedOther.app);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMessage()).compareTo(typedOther.isSetMessage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, typedOther.message);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(typedOther.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, typedOther.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTaskId()).compareTo(typedOther.isSetTaskId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, typedOther.taskId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser()).compareTo(typedOther.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, typedOther.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEstimatedResources()).compareTo(typedOther.isSetEstimatedResources());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEstimatedResources()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.estimatedResources, typedOther.estimatedResources);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSchedulerAddress()).compareTo(typedOther.isSetSchedulerAddress());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSchedulerAddress()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schedulerAddress, typedOther.schedulerAddress);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // APP
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.app = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // MESSAGE
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.message = iprot.readBinary();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // REQUEST_ID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.requestId = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // TASK_ID
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.taskId = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // USER
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.user = new edu.berkeley.sparrow.thrift.TUserGroupInfo();
              this.user.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // ESTIMATED_RESOURCES
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.estimatedResources = new edu.berkeley.sparrow.thrift.TResourceVector();
              this.estimatedResources.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 7: // SCHEDULER_ADDRESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.schedulerAddress = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.app != null) {
        oprot.writeFieldBegin(APP_FIELD_DESC);
        oprot.writeString(this.app);
        oprot.writeFieldEnd();
      }
      if (this.message != null) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        oprot.writeBinary(this.message);
        oprot.writeFieldEnd();
      }
      if (this.requestId != null) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeString(this.requestId);
        oprot.writeFieldEnd();
      }
      if (this.taskId != null) {
        oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
        oprot.writeString(this.taskId);
        oprot.writeFieldEnd();
      }
      if (this.user != null) {
        oprot.writeFieldBegin(USER_FIELD_DESC);
        this.user.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.estimatedResources != null) {
        oprot.writeFieldBegin(ESTIMATED_RESOURCES_FIELD_DESC);
        this.estimatedResources.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.schedulerAddress != null) {
        oprot.writeFieldBegin(SCHEDULER_ADDRESS_FIELD_DESC);
        oprot.writeString(this.schedulerAddress);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("launchTask_args(");
      boolean first = true;

      sb.append("app:");
      if (this.app == null) {
        sb.append("null");
      } else {
        sb.append(this.app);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.message, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("requestId:");
      if (this.requestId == null) {
        sb.append("null");
      } else {
        sb.append(this.requestId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("taskId:");
      if (this.taskId == null) {
        sb.append("null");
      } else {
        sb.append(this.taskId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("estimatedResources:");
      if (this.estimatedResources == null) {
        sb.append("null");
      } else {
        sb.append(this.estimatedResources);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("schedulerAddress:");
      if (this.schedulerAddress == null) {
        sb.append("null");
      } else {
        sb.append(this.schedulerAddress);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

  }

  public static class launchTask_result implements org.apache.thrift.TBase<launchTask_result, launchTask_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("launchTask_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(launchTask_result.class, metaDataMap);
    }

    public launchTask_result() {
    }

    public launchTask_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public launchTask_result(launchTask_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public launchTask_result deepCopy() {
      return new launchTask_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public launchTask_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof launchTask_result)
        return this.equals((launchTask_result)that);
      return false;
    }

    public boolean equals(launchTask_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(launchTask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      launchTask_result typedOther = (launchTask_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.BOOL) {
              this.success = iprot.readBool();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("launchTask_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te.getMessage());
      }
    }

  }

}
