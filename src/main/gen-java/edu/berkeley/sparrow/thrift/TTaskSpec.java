/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package edu.berkeley.sparrow.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TTaskSpec implements org.apache.thrift.TBase<TTaskSpec, TTaskSpec._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTaskSpec");

  private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PREFERENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("preference", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField ESTIMATED_RESOURCES_FIELD_DESC = new org.apache.thrift.protocol.TField("estimatedResources", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)4);

  public ByteBuffer taskID; // required
  public TPlacementPreference preference; // required
  public TResourceVector estimatedResources; // required
  public ByteBuffer message; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TASK_ID((short)1, "taskID"),
    PREFERENCE((short)2, "preference"),
    ESTIMATED_RESOURCES((short)3, "estimatedResources"),
    MESSAGE((short)4, "message");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TASK_ID
          return TASK_ID;
        case 2: // PREFERENCE
          return PREFERENCE;
        case 3: // ESTIMATED_RESOURCES
          return ESTIMATED_RESOURCES;
        case 4: // MESSAGE
          return MESSAGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.PREFERENCE, new org.apache.thrift.meta_data.FieldMetaData("preference", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPlacementPreference.class)));
    tmpMap.put(_Fields.ESTIMATED_RESOURCES, new org.apache.thrift.meta_data.FieldMetaData("estimatedResources", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TResourceVector.class)));
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTaskSpec.class, metaDataMap);
  }

  public TTaskSpec() {
  }

  public TTaskSpec(
    ByteBuffer taskID,
    TPlacementPreference preference,
    TResourceVector estimatedResources)
  {
    this();
    this.taskID = taskID;
    this.preference = preference;
    this.estimatedResources = estimatedResources;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTaskSpec(TTaskSpec other) {
    if (other.isSetTaskID()) {
      this.taskID = org.apache.thrift.TBaseHelper.copyBinary(other.taskID);
;
    }
    if (other.isSetPreference()) {
      this.preference = new TPlacementPreference(other.preference);
    }
    if (other.isSetEstimatedResources()) {
      this.estimatedResources = new TResourceVector(other.estimatedResources);
    }
    if (other.isSetMessage()) {
      this.message = org.apache.thrift.TBaseHelper.copyBinary(other.message);
;
    }
  }

  public TTaskSpec deepCopy() {
    return new TTaskSpec(this);
  }

  public void clear() {
    this.taskID = null;
    this.preference = null;
    this.estimatedResources = null;
    this.message = null;
  }

  public byte[] getTaskID() {
    setTaskID(org.apache.thrift.TBaseHelper.rightSize(taskID));
    return taskID == null ? null : taskID.array();
  }

  public ByteBuffer bufferForTaskID() {
    return taskID;
  }

  public TTaskSpec setTaskID(byte[] taskID) {
    setTaskID(taskID == null ? (ByteBuffer)null : ByteBuffer.wrap(taskID));
    return this;
  }

  public TTaskSpec setTaskID(ByteBuffer taskID) {
    this.taskID = taskID;
    return this;
  }

  public void unsetTaskID() {
    this.taskID = null;
  }

  /** Returns true if field taskID is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskID() {
    return this.taskID != null;
  }

  public void setTaskIDIsSet(boolean value) {
    if (!value) {
      this.taskID = null;
    }
  }

  public TPlacementPreference getPreference() {
    return this.preference;
  }

  public TTaskSpec setPreference(TPlacementPreference preference) {
    this.preference = preference;
    return this;
  }

  public void unsetPreference() {
    this.preference = null;
  }

  /** Returns true if field preference is set (has been assigned a value) and false otherwise */
  public boolean isSetPreference() {
    return this.preference != null;
  }

  public void setPreferenceIsSet(boolean value) {
    if (!value) {
      this.preference = null;
    }
  }

  public TResourceVector getEstimatedResources() {
    return this.estimatedResources;
  }

  public TTaskSpec setEstimatedResources(TResourceVector estimatedResources) {
    this.estimatedResources = estimatedResources;
    return this;
  }

  public void unsetEstimatedResources() {
    this.estimatedResources = null;
  }

  /** Returns true if field estimatedResources is set (has been assigned a value) and false otherwise */
  public boolean isSetEstimatedResources() {
    return this.estimatedResources != null;
  }

  public void setEstimatedResourcesIsSet(boolean value) {
    if (!value) {
      this.estimatedResources = null;
    }
  }

  public byte[] getMessage() {
    setMessage(org.apache.thrift.TBaseHelper.rightSize(message));
    return message == null ? null : message.array();
  }

  public ByteBuffer bufferForMessage() {
    return message;
  }

  public TTaskSpec setMessage(byte[] message) {
    setMessage(message == null ? (ByteBuffer)null : ByteBuffer.wrap(message));
    return this;
  }

  public TTaskSpec setMessage(ByteBuffer message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TASK_ID:
      if (value == null) {
        unsetTaskID();
      } else {
        setTaskID((ByteBuffer)value);
      }
      break;

    case PREFERENCE:
      if (value == null) {
        unsetPreference();
      } else {
        setPreference((TPlacementPreference)value);
      }
      break;

    case ESTIMATED_RESOURCES:
      if (value == null) {
        unsetEstimatedResources();
      } else {
        setEstimatedResources((TResourceVector)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((ByteBuffer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TASK_ID:
      return getTaskID();

    case PREFERENCE:
      return getPreference();

    case ESTIMATED_RESOURCES:
      return getEstimatedResources();

    case MESSAGE:
      return getMessage();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TASK_ID:
      return isSetTaskID();
    case PREFERENCE:
      return isSetPreference();
    case ESTIMATED_RESOURCES:
      return isSetEstimatedResources();
    case MESSAGE:
      return isSetMessage();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TTaskSpec)
      return this.equals((TTaskSpec)that);
    return false;
  }

  public boolean equals(TTaskSpec that) {
    if (that == null)
      return false;

    boolean this_present_taskID = true && this.isSetTaskID();
    boolean that_present_taskID = true && that.isSetTaskID();
    if (this_present_taskID || that_present_taskID) {
      if (!(this_present_taskID && that_present_taskID))
        return false;
      if (!this.taskID.equals(that.taskID))
        return false;
    }

    boolean this_present_preference = true && this.isSetPreference();
    boolean that_present_preference = true && that.isSetPreference();
    if (this_present_preference || that_present_preference) {
      if (!(this_present_preference && that_present_preference))
        return false;
      if (!this.preference.equals(that.preference))
        return false;
    }

    boolean this_present_estimatedResources = true && this.isSetEstimatedResources();
    boolean that_present_estimatedResources = true && that.isSetEstimatedResources();
    if (this_present_estimatedResources || that_present_estimatedResources) {
      if (!(this_present_estimatedResources && that_present_estimatedResources))
        return false;
      if (!this.estimatedResources.equals(that.estimatedResources))
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TTaskSpec other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TTaskSpec typedOther = (TTaskSpec)other;

    lastComparison = Boolean.valueOf(isSetTaskID()).compareTo(typedOther.isSetTaskID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskID, typedOther.taskID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreference()).compareTo(typedOther.isSetPreference());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreference()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preference, typedOther.preference);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEstimatedResources()).compareTo(typedOther.isSetEstimatedResources());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEstimatedResources()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.estimatedResources, typedOther.estimatedResources);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(typedOther.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, typedOther.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // TASK_ID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.taskID = iprot.readBinary();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // PREFERENCE
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.preference = new TPlacementPreference();
            this.preference.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // ESTIMATED_RESOURCES
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.estimatedResources = new TResourceVector();
            this.estimatedResources.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // MESSAGE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.message = iprot.readBinary();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.taskID != null) {
      oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
      oprot.writeBinary(this.taskID);
      oprot.writeFieldEnd();
    }
    if (this.preference != null) {
      oprot.writeFieldBegin(PREFERENCE_FIELD_DESC);
      this.preference.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.estimatedResources != null) {
      oprot.writeFieldBegin(ESTIMATED_RESOURCES_FIELD_DESC);
      this.estimatedResources.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.message != null) {
      if (isSetMessage()) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        oprot.writeBinary(this.message);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TTaskSpec(");
    boolean first = true;

    sb.append("taskID:");
    if (this.taskID == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.taskID, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("preference:");
    if (this.preference == null) {
      sb.append("null");
    } else {
      sb.append(this.preference);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("estimatedResources:");
    if (this.estimatedResources == null) {
      sb.append("null");
    } else {
      sb.append(this.estimatedResources);
    }
    first = false;
    if (isSetMessage()) {
      if (!first) sb.append(", ");
      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.message, sb);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te.getMessage());
    }
  }

}

